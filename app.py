import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from math import exp, cos, sin, radians, sqrt
import io

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="RMR14 UNI - Trabajo Escalonado Geomec√°nica",
    page_icon="üèîÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado - simplificado
st.markdown("""
<style>
    .main {
        padding-top: 1rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
</style>
""", unsafe_allow_html=True)

# Funciones de c√°lculo RMR (importadas de notebooks)
@st.cache_data
def load_default_data():
    """Cargar datos por defecto"""
    try:
        return pd.read_csv('data/consolidated_data.csv')
    except:
        return None

def calculate_rqd_from_frequency(num_discontinuities, total_length_m):
    """Calcular RQD desde frecuencia de discontinuidades"""
    if total_length_m <= 0:
        return 0
    lambda_freq = num_discontinuities / total_length_m
    rqd = 100 * exp(-0.1 * lambda_freq) * (0.1 * lambda_freq + 1)
    return max(0, min(100, rqd))

def get_rqd_rating(rqd):
    if rqd >= 90: return 20
    elif rqd >= 75: return 17
    elif rqd >= 50: return 13
    elif rqd >= 25: return 8
    else: return 3

def get_spacing_rating(spacing_mm):
    if spacing_mm >= 2000: return 20
    elif spacing_mm >= 600: return 15
    elif spacing_mm >= 200: return 10
    elif spacing_mm >= 60: return 8
    else: return 5

def get_discontinuity_condition_rating(aperture_code, roughness_code, weathering_code, infilling_code):
    base_rating = 30
    aperture_penalty = (aperture_code - 1) * 2
    roughness_penalty = (roughness_code - 1) * 1.5
    weathering_penalty = (weathering_code - 1) * 3
    infilling_penalty = 0 if infilling_code <= 2 else (5 if infilling_code == 3 else 3)
    total_rating = base_rating - aperture_penalty - roughness_penalty - weathering_penalty - infilling_penalty
    return max(0, min(30, total_rating))

def get_groundwater_rating(groundwater_code):
    ratings = {1: 15, 2: 10, 3: 7, 4: 4, 5: 0}
    return ratings.get(groundwater_code, 7)

def calculate_station_rmr(data, station):
    """Calcular RMR14 para una estaci√≥n espec√≠fica"""
    df_station = data[data['Station'] == station].copy()
    
    # Par√°metros b√°sicos
    num_discontinuities = len(df_station)
    total_length = df_station['Distance_m'].max()
    
    # Conversiones
    persistence_conversion = {1: 0.5, 2: 2.0, 3: 6.5, 4: 15.0, 5: 25.0}
    spacing_conversion = {1: 10, 2: 40, 3: 130, 4: 400, 5: 800}
    
    # Calcular RQD
    rqd = calculate_rqd_from_frequency(num_discontinuities, total_length)
    
    # Calcular espaciado promedio
    df_station['Spacing_mm_real'] = df_station['Spacing_mm'].map(spacing_conversion)
    spacing_avg = df_station['Spacing_mm_real'].mean()
    
    # Ratings
    rating_strength = 7  # R4 - 75 MPa
    rating_rqd = get_rqd_rating(rqd)
    rating_spacing = get_spacing_rating(spacing_avg)
    
    rating_conditions = get_discontinuity_condition_rating(
        df_station['Aperture_mm'].mean(),
        df_station['Roughness'].mean(),
        df_station['Weathering'].mean(),
        df_station['Infilling_Type'].mean()
    )
    
    rating_groundwater = get_groundwater_rating(int(df_station['Groundwater'].mean()))
    orientation_adjustment = -5
    
    rmr_total = (rating_strength + rating_rqd + rating_spacing + 
                rating_conditions + rating_groundwater + orientation_adjustment)
    
    # Clasificaci√≥n
    if rmr_total >= 81: classification = "Clase I - Muy buena"
    elif rmr_total >= 61: classification = "Clase II - Buena"
    elif rmr_total >= 41: classification = "Clase III - Regular"
    elif rmr_total >= 21: classification = "Clase IV - Mala"
    else: classification = "Clase V - Muy mala"
    
    return {
        'Station': station,
        'RMR_Total': rmr_total,
        'Classification': classification,
        'RQD': rqd,
        'Spacing_mm': spacing_avg,
        'Num_Discontinuities': num_discontinuities,
        'Total_Length': total_length,
        'Ratings': {
            'Strength': rating_strength,
            'RQD': rating_rqd,
            'Spacing': rating_spacing,
            'Conditions': rating_conditions,
            'Groundwater': rating_groundwater,
            'Orientation': orientation_adjustment
        }
    }

# Header principal simplificado
st.markdown("# üèîÔ∏è RMR14 - An√°lisis Geot√©cnico Cerros UNI")

# Sidebar
st.sidebar.markdown("## ‚öôÔ∏è Configuraci√≥n")

# Opci√≥n de datos
data_option = st.sidebar.radio(
    "Seleccionar fuente de datos:",
    ["Usar datos de ejemplo (Cerros UNI)", "Cargar archivo CSV personalizado"]
)

# Cargar datos
if data_option == "Usar datos de ejemplo (Cerros UNI)":
    data = load_default_data()
    if data is None:
        st.error("No se pudieron cargar los datos de ejemplo. Por favor, carga un archivo CSV.")
        st.stop()
    st.sidebar.success("‚úÖ Datos de Cerros UNI cargados")
else:
    uploaded_file = st.sidebar.file_uploader(
        "Cargar archivo CSV",
        type=['csv'],
        help="El archivo debe tener las columnas: Station, Dip_Direction_degrees, Dip_degrees, Spacing_mm, etc."
    )
    
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.sidebar.success(f"‚úÖ Archivo cargado: {len(data)} registros")
    else:
        st.info("üëÜ Por favor, carga un archivo CSV o usa los datos de ejemplo")
        st.stop()

# Tabs principales
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üìä Vista General", "üî¢ An√°lisis RMR14", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Familias de Discontinuidades", "üìã Datos Detallados", "üìö Cat√°logo RMR14", "‚ÑπÔ∏è Acerca de"])

with tab1:
    st.markdown("## üìà Resumen Ejecutivo")
    
    col1, col2, col3, col4 = st.columns(4)
    
    # M√©tricas generales
    total_stations = data['Station'].nunique()
    total_records = len(data)
    
    with col1:
        st.metric("üèîÔ∏è Estaciones", total_stations)
    
    with col2:
        st.metric("üìè Registros totales", total_records)
    
    # Calcular RMR promedio
    rmr_results = []
    for station in data['Station'].unique():
        result = calculate_station_rmr(data, station)
        rmr_results.append(result)
    
    avg_rmr = np.mean([r['RMR_Total'] for r in rmr_results])
    
    with col3:
        st.metric("‚≠ê RMR14 Promedio", f"{avg_rmr:.1f}")
    
    with col4:
        classification_counts = {}
        for r in rmr_results:
            cls = r['Classification']
            classification_counts[cls] = classification_counts.get(cls, 0) + 1
        most_common = max(classification_counts.items(), key=lambda x: x[1])
        st.metric("üéØ Clasificaci√≥n Dominante", most_common[0].split(' - ')[1])
    
    # Gr√°fico de resumen
    st.markdown("### üìä RMR14 por Estaci√≥n")
    
    df_summary = pd.DataFrame(rmr_results)
    
    fig = px.bar(
        df_summary, 
        x='Station', 
        y='RMR_Total',
        color='Classification',
        title="RMR14 por Estaci√≥n",
        labels={'RMR_Total': 'RMR14 Total', 'Station': 'Estaci√≥n'}
    )
    
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)
    
    # Mapa de calor de orientaciones
    st.markdown("### üß≠ Distribuci√≥n de Orientaciones")
    
    fig_polar = go.Figure()
    
    for station in data['Station'].unique():
        df_station = data[data['Station'] == station].dropna(subset=['Dip_Direction_degrees'])
        if len(df_station) > 0:
            fig_polar.add_trace(go.Scatterpolar(
                r=[1] * len(df_station),
                theta=df_station['Dip_Direction_degrees'],
                mode='markers',
                name=f'Estaci√≥n {station}',
                marker=dict(size=8)
            ))
    
    fig_polar.update_layout(
        polar=dict(
            radialaxis=dict(visible=False),
            angularaxis=dict(direction="clockwise", period=360)
        ),
        height=500,
        title="Distribuci√≥n de Orientaciones por Estaci√≥n"
    )
    
    st.plotly_chart(fig_polar, use_container_width=True)

with tab2:
    st.markdown("## üî¢ An√°lisis Detallado RMR14")
    
    # Selector de estaci√≥n
    selected_station = st.selectbox(
        "Seleccionar estaci√≥n para an√°lisis detallado:",
        data['Station'].unique(),
        format_func=lambda x: f"Estaci√≥n {x}"
    )
    
    # Calcular RMR para estaci√≥n seleccionada
    station_result = calculate_station_rmr(data, selected_station)
    
    # Mostrar resultados
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown(f"### üìç Estaci√≥n {selected_station}")
        
        # Breakdown de ratings
        ratings = station_result['Ratings']
        
        breakdown_data = pd.DataFrame({
            'Par√°metro': ['Resistencia UCS', 'RQD', 'Espaciado', 'Condiciones', 'Agua Subterr√°nea', 'Orientaci√≥n'],
            'Rating': [ratings['Strength'], ratings['RQD'], ratings['Spacing'], 
                      ratings['Conditions'], ratings['Groundwater'], ratings['Orientation']],
            'Valor': [f"75 MPa (R4)", f"{station_result['RQD']:.1f}%", 
                     f"{station_result['Spacing_mm']:.0f} mm", "Promedio c√≥digos",
                     "Seg√∫n c√≥digos", "Desfavorable"]
        })
        
        fig_breakdown = px.bar(
            breakdown_data,
            x='Par√°metro',
            y='Rating',
            color='Rating',
            title=f"Desglose RMR14 - Estaci√≥n {selected_station}",
            color_continuous_scale='RdYlGn'
        )
        
        fig_breakdown.update_layout(height=400)
        st.plotly_chart(fig_breakdown, use_container_width=True)
    
    with col2:
        st.markdown("### üéØ Resultado Final")
        st.markdown(f"## **{station_result['RMR_Total']:.1f}**")
        st.markdown(f"**{station_result['Classification']}**")
        
        st.markdown("### üìä Par√°metros Clave")
        st.metric("RQD Calculado", f"{station_result['RQD']:.1f}%")
        st.metric("Discontinuidades", station_result['Num_Discontinuities'])
        st.metric("Longitud Total", f"{station_result['Total_Length']:.2f} m")
        st.metric("Espaciado Promedio", f"{station_result['Spacing_mm']:.0f} mm")

with tab3:
    st.markdown("## üë®‚Äçüë©‚Äçüëß‚Äçüë¶ An√°lisis de Familias de Discontinuidades")
    
    st.markdown("""
    ### üîç Metodolog√≠a de An√°lisis
    - **Agrupaci√≥n**: Clustering angular con tolerancia ¬±15¬∞
    - **Criterio**: M√≠nimo 3 miembros por familia
    - **An√°lisis**: Propiedades estad√≠sticas y RMR espec√≠fico por familia
    """)
    
    # Funciones para an√°lisis de familias (adaptadas del notebook)
    def calculate_angular_distance(dip_dir1, dip_dir2):
        """Calcula distancia angular considerando naturaleza circular"""
        diff = abs(dip_dir1 - dip_dir2)
        return min(diff, 360 - diff)

    def identify_families(orientations, tolerance=15, min_members=3):
        """Identifica familias basado en orientaciones similares"""
        n = len(orientations)
        visited = [False] * n
        families = []
        
        for i in range(n):
            if visited[i]:
                continue
                
            current_family = [i]
            visited[i] = True
            
            for j in range(i + 1, n):
                if visited[j]:
                    continue
                    
                distances = [calculate_angular_distance(orientations[k], orientations[j]) 
                           for k in current_family]
                avg_distance = np.mean(distances)
                
                if avg_distance <= tolerance:
                    current_family.append(j)
                    visited[j] = True
            
            if len(current_family) >= min_members:
                families.append(current_family)
        
        return families

    def analyze_family_properties(df_family):
        """Analiza propiedades estad√≠sticas de una familia"""
        return {
            'Count': len(df_family),
            'Dip_Direction_mean': df_family['Dip_Direction_degrees'].mean(),
            'Dip_Direction_std': df_family['Dip_Direction_degrees'].std(),
            'Spacing_code_mean': df_family['Spacing_mm'].mean(),
            'Persistence_code_mean': df_family['Persistence_m'].mean(),
            'Aperture_code_mean': df_family['Aperture_mm'].mean(),
            'Roughness_code_mean': df_family['Roughness'].mean(),
            'Weathering_code_mean': df_family['Weathering'].mean(),
            'Infilling_code_mean': df_family['Infilling_Type'].mean(),
            'Groundwater_code_mean': df_family['Groundwater'].mean()
        }

    def calculate_family_rmr(family_properties, station_length):
        """Calcula RMR espec√≠fico para una familia"""
        rating_strength = 7  # R4 - 75 MPa
        
        family_rqd = calculate_rqd_from_frequency(family_properties['Count'], station_length)
        rating_rqd = get_rqd_rating(family_rqd)
        
        spacing_conversion = {1: 10, 2: 40, 3: 130, 4: 400, 5: 800}
        spacing_mm = spacing_conversion.get(int(family_properties['Spacing_code_mean']), 130)
        rating_spacing = get_spacing_rating(spacing_mm)
        
        rating_conditions = get_discontinuity_condition_rating(
            family_properties['Aperture_code_mean'],
            family_properties['Roughness_code_mean'],
            family_properties['Weathering_code_mean'],
            family_properties['Infilling_code_mean']
        )
        
        rating_groundwater = get_groundwater_rating(int(family_properties['Groundwater_code_mean']))
        orientation_adjustment = -5
        
        rmr_total = (rating_strength + rating_rqd + rating_spacing + 
                    rating_conditions + rating_groundwater + orientation_adjustment)
        
        return {
            'RMR_total': rmr_total,
            'RQD_family': family_rqd,
            'Spacing_mm': spacing_mm,
            'ratings': {
                'strength': rating_strength,
                'rqd': rating_rqd,
                'spacing': rating_spacing,
                'conditions': rating_conditions,
                'groundwater': rating_groundwater
            }
        }
    
    # Realizar an√°lisis de familias
    all_families_results = []
    
    for station in data['Station'].unique():
        df_station = data[data['Station'] == station].copy()
        df_valid = df_station.dropna(subset=['Dip_Direction_degrees'])
        
        if len(df_valid) == 0:
            continue
            
        orientations = df_valid['Dip_Direction_degrees'].tolist()
        families = identify_families(orientations, tolerance=15, min_members=3)
        
        station_length = df_station['Distance_m'].max()
        
        for family_idx, family_indices in enumerate(families, 1):
            df_family = df_valid.iloc[family_indices]
            family_properties = analyze_family_properties(df_family)
            family_rmr = calculate_family_rmr(family_properties, station_length)
            
            family_result = {
                'Station': station,
                'Family': f'F{family_idx}',
                'Count': family_properties['Count'],
                'Dip_Direction_mean': family_properties['Dip_Direction_mean'],
                'Dip_Direction_std': family_properties['Dip_Direction_std'],
                'RMR_total': family_rmr['RMR_total'],
                'RQD_family': family_rmr['RQD_family'],
                'Spacing_mm': family_rmr['Spacing_mm']
            }
            all_families_results.append(family_result)
    
    df_families = pd.DataFrame(all_families_results)
    
    if not df_families.empty:
        # Crear columna para identificaci√≥n
        df_families['Family_Station'] = 'Est' + df_families['Station'].astype(str) + '_' + df_families['Family']
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üèîÔ∏è Familias Identificadas", len(df_families))
        
        with col2:
            st.metric("üìä RMR Promedio", f"{df_families['RMR_total'].mean():.1f}")
        
        with col3:
            st.metric("üë• Miembros Promedio", f"{df_families['Count'].mean():.1f}")
        
        with col4:
            rmr_range = f"{df_families['RMR_total'].min():.1f} - {df_families['RMR_total'].max():.1f}"
            st.metric("üìà Rango RMR", rmr_range)
        
        st.markdown("---")
        
        # Visualizaciones
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä RMR14 por Familia")
            fig_families = px.bar(
                df_families, 
                x='Family_Station', 
                y='RMR_total',
                color='Station',
                title="RMR14 por Familia de Discontinuidades",
                labels={'RMR_total': 'RMR14 Total', 'Family_Station': 'Familia'},
                text='RMR_total'
            )
            fig_families.update_traces(texttemplate='%{text:.1f}', textposition='outside')
            fig_families.update_layout(height=400, xaxis_tickangle=-45)
            st.plotly_chart(fig_families, use_container_width=True)
        
        with col2:
            st.markdown("### üéØ Miembros vs RMR")
            fig_scatter = px.scatter(
                df_families, 
                x='Count', 
                y='RMR_total',
                color='Station',
                size='RQD_family',
                hover_data=['Family_Station', 'Dip_Direction_mean'],
                title="N√∫mero de Miembros vs RMR14",
                labels={'Count': 'N√∫mero de Miembros', 'RMR_total': 'RMR14 Total'}
            )
            fig_scatter.update_layout(height=400)
            st.plotly_chart(fig_scatter, use_container_width=True)
        
        # Distribuci√≥n de orientaciones por familia
        st.markdown("### üß≠ Distribuci√≥n de Orientaciones por Familia")
        
        fig_polar_families = go.Figure()
        
        colors = px.colors.qualitative.Set3
        for i, (_, family) in enumerate(df_families.iterrows()):
            station = family['Station']
            family_name = family['Family']
            df_station = data[data['Station'] == station]
            df_valid = df_station.dropna(subset=['Dip_Direction_degrees'])
            orientations = df_valid['Dip_Direction_degrees'].tolist()
            families = identify_families(orientations, tolerance=15, min_members=3)
            
            if len(families) > int(family_name[1:]) - 1:
                family_indices = families[int(family_name[1:]) - 1]
                family_orientations = [orientations[idx] for idx in family_indices]
                
                fig_polar_families.add_trace(go.Scatterpolar(
                    r=[1] * len(family_orientations),
                    theta=family_orientations,
                    mode='markers',
                    name=family['Family_Station'],
                    marker=dict(size=8, color=colors[i % len(colors)])
                ))
        
        fig_polar_families.update_layout(
            polar=dict(
                radialaxis=dict(visible=False),
                angularaxis=dict(direction="clockwise", period=360)
            ),
            height=500,
            title="Orientaciones de Familias de Discontinuidades"
        )
        
        st.plotly_chart(fig_polar_families, use_container_width=True)
        
        # Tabla detallada de familias
        st.markdown("### üìã Detalle de Familias Identificadas")
        
        # Formatear tabla para mejor presentaci√≥n
        df_display = df_families.copy()
        df_display['Orientaci√≥n'] = df_display['Dip_Direction_mean'].round(1).astype(str) + '¬∞ (¬±' + df_display['Dip_Direction_std'].round(1).astype(str) + '¬∞)'
        df_display['RMR14'] = df_display['RMR_total'].round(1)
        df_display['RQD'] = df_display['RQD_family'].round(1).astype(str) + '%'
        df_display['Espaciado'] = df_display['Spacing_mm'].astype(str) + ' mm'
        
        df_table = df_display[['Station', 'Family', 'Count', 'Orientaci√≥n', 'RMR14', 'RQD', 'Espaciado']]
        df_table.columns = ['Estaci√≥n', 'Familia', 'Miembros', 'Orientaci√≥n Media', 'RMR14', 'RQD', 'Espaciado']
        
        st.dataframe(df_table, use_container_width=True)
        
        # Resumen estad√≠stico
        st.markdown("### üìà Resumen Estad√≠stico")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            **An√°lisis General:**
            - Total familias: {len(df_families)}
            - RMR promedio: {df_families['RMR_total'].mean():.1f}
            - RMR m√≠nimo: {df_families['RMR_total'].min():.1f}
            - RMR m√°ximo: {df_families['RMR_total'].max():.1f}
            """)
        
        with col2:
            st.markdown(f"""
            **Distribuci√≥n por Estaci√≥n:**
            - Estaci√≥n 1: {len(df_families[df_families['Station']==1])} familias
            - Estaci√≥n 2: {len(df_families[df_families['Station']==2])} familias
            - Estaci√≥n 3: {len(df_families[df_families['Station']==3])} familias
            - Estaci√≥n 4: {len(df_families[df_families['Station']==4])} familias
            """)
        
        # Comparaci√≥n familias vs estaci√≥n
        st.markdown("### ‚öñÔ∏è Comparaci√≥n: Familias vs Promedio de Estaci√≥n")
        
        # Calcular RMR promedio por estaci√≥n
        station_rmr = []
        for station in data['Station'].unique():
            result = calculate_station_rmr(data, station)
            station_rmr.append({'Station': station, 'RMR_Station': result['RMR_Total']})
        
        df_station_rmr = pd.DataFrame(station_rmr)
        df_comparison = df_families.merge(df_station_rmr, on='Station')
        df_comparison['RMR_Difference'] = df_comparison['RMR_total'] - df_comparison['RMR_Station']
        
        fig_comparison = px.bar(
            df_comparison, 
            x='Family_Station', 
            y=['RMR_Station', 'RMR_total'],
            title="Comparaci√≥n RMR: Familias vs Promedio de Estaci√≥n",
            labels={'value': 'RMR14', 'Family_Station': 'Familia'},
            barmode='group'
        )
        fig_comparison.update_layout(height=400, xaxis_tickangle=-45)
        st.plotly_chart(fig_comparison, use_container_width=True)
        
        # Interpretaci√≥n
        st.markdown("### üîç Interpretaci√≥n Geot√©cnica")
        st.info("""
        **Observaciones principales:**
        - Se identificaron 9 familias de discontinuidades con orientaciones dominantes
        - Las familias muestran RMR14 variable (62.8 - 80.5), indicando heterogeneidad local
        - El an√°lisis por familias permite identificar zonas de mejor/peor calidad dentro de cada estaci√≥n
        - Las familias con mayor n√∫mero de miembros tienden a tener orientaciones m√°s consistentes (menor desviaci√≥n)
        """)
        
    else:
        st.warning("‚ö†Ô∏è No se identificaron familias suficientes con los criterios establecidos (m√≠n. 3 miembros, tolerancia ¬±15¬∞)")
        st.markdown("""
        **Posibles razones:**
        - Orientaciones muy dispersas
        - Pocas discontinuidades por estaci√≥n
        - Criterios muy restrictivos
        
        **Recomendaciones:**
        - Aumentar tolerancia angular (¬±20¬∞ o ¬±25¬∞)
        - Reducir n√∫mero m√≠nimo de miembros a 2
        - Analizar estaciones individualmente
        """)

with tab4:
    st.markdown("## üìã Datos Detallados")
    
    # Mostrar datos raw
    st.markdown("### üìÑ Datos Consolidados")
    st.dataframe(data, use_container_width=True)
    
    # Opci√≥n de descarga
    csv = data.to_csv(index=False)
    st.download_button(
        label="üì• Descargar datos como CSV",
        data=csv,
        file_name=f"rmr14_data_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.csv",
        mime="text/csv"
    )
    
    # Estad√≠sticas b√°sicas
    st.markdown("### üìà Estad√≠sticas Descriptivas")
    numeric_cols = data.select_dtypes(include=[np.number]).columns
    st.dataframe(data[numeric_cols].describe(), use_container_width=True)

with tab5:
    st.markdown("## üìö Cat√°logo RMR14 - Tablas de Referencia")
    
    st.markdown("### üîç Sistema de Clasificaci√≥n Geomec√°nica")
    st.markdown("""
    El sistema RMR14 utiliza tablas de referencia estandarizadas para evaluar cada par√°metro.
    Esta secci√≥n presenta las tablas oficiales utilizadas en el an√°lisis de Cerros UNI.
    """)
    
    # Crear dos columnas para las tablas
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üí™ Par√°metro 1: Resistencia UCS")
        resistance_data = {
            "Resistencia (MPa)": [">250", "100-250", "50-100", "25-50", "5-25", "1-5", "<1"],
            "Clase": ["R6", "R5", "R4", "R3", "R2", "R1", "R0"],
            "Rating": [15, 12, 7, 4, 2, 1, 0],
            "Descripci√≥n": ["Extremadamente fuerte", "Muy fuerte", "Fuerte", "Moderadamente fuerte", "D√©bil", "Muy d√©bil", "Extremadamente d√©bil"]
        }
        st.dataframe(pd.DataFrame(resistance_data), use_container_width=True)
        
        st.markdown("#### üìè Par√°metro 3: Espaciado de Discontinuidades")
        spacing_data = {
            "Espaciado": [">2 m", "0.6-2 m", "200-600 mm", "60-200 mm", "<60 mm"],
            "Descripci√≥n": ["Muy amplio", "Amplio", "Moderado", "Cerrado", "Muy cerrado"],
            "Rating": [20, 15, 10, 8, 5]
        }
        st.dataframe(pd.DataFrame(spacing_data), use_container_width=True)
        
        st.markdown("#### üíß Par√°metro 5: Condiciones de Agua Subterr√°nea")
        water_data = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Condici√≥n": ["Completamente seco", "H√∫medo", "Goteo", "Flujo", "Flujo intenso"],
            "Descripci√≥n": ["Sin agua", "Ligeramente h√∫medo", "Goteo ocasional", "Flujo continuo", "Flujo abundante"],
            "Rating": [15, 10, 7, 4, 0]
        }
        st.dataframe(pd.DataFrame(water_data), use_container_width=True)
    
    with col2:
        st.markdown("#### üîß Par√°metro 2: RQD (Rock Quality Designation)")
        rqd_data = {
            "RQD (%)": ["90-100", "75-90", "50-75", "25-50", "<25"],
            "Calidad": ["Excelente", "Buena", "Regular", "Pobre", "Muy pobre"],
            "Rating": [20, 17, 13, 8, 3]
        }
        st.dataframe(pd.DataFrame(rqd_data), use_container_width=True)
        
        st.markdown("#### üîó Par√°metro 4: Condici√≥n de las Discontinuidades")
        st.markdown("**4a. Persistencia (Longitud)**")
        persistence_data = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Persistencia": ["<1 m", "1-3 m", "3-10 m", "10-20 m", ">20 m"],
            "Conversi√≥n (m)": [0.5, 2.0, 6.5, 15.0, 25.0],
            "Rating": [6, 4, 2, 1, 0]
        }
        st.dataframe(pd.DataFrame(persistence_data), use_container_width=True)
        
        st.markdown("**4b. Apertura**")
        aperture_data = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Apertura": ["Cerrada", "<0.1 mm", "0.1-1.0 mm", "1-5 mm", ">5 mm"],
            "Rating": [6, 5, 3, 1, 0]
        }
        st.dataframe(pd.DataFrame(aperture_data), use_container_width=True)
        
        st.markdown("**4c. Rugosidad**")
        roughness_data = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Rugosidad": ["Muy rugosa", "Rugosa", "Ligeramente rugosa", "Lisa", "Espejo de falla"],
            "Rating": [6, 5, 3, 1, 0]
        }
        st.dataframe(pd.DataFrame(roughness_data), use_container_width=True)
    
    st.markdown("---")
    
    # Tabla de clasificaci√≥n final
    st.markdown("### üéØ Clasificaci√≥n Final RMR")
    
    col3, col4 = st.columns([1, 1])
    
    with col3:
        classification_data = {
            "Clase": ["I", "II", "III", "IV", "V"],
            "RMR Total": ["81-100", "61-80", "41-60", "21-40", "0-20"],
            "Calidad": ["Muy buena", "Buena", "Regular", "Mala", "Muy mala"]
        }
        st.dataframe(pd.DataFrame(classification_data), use_container_width=True)
    
    with col4:
        st.markdown("#### üîÑ Ajuste por Orientaci√≥n")
        orientation_data = {
            "Orientaci√≥n": ["Muy favorable", "Favorable", "Regular", "Desfavorable", "Muy desfavorable"],
            "T√∫neles": [0, -2, -5, -10, -12],
            "Taludes": [0, -5, -25, -50, -60]
        }
        st.dataframe(pd.DataFrame(orientation_data), use_container_width=True)
    
    st.markdown("---")
    
    # C√≥digos de campo utilizados
    st.markdown("### üèîÔ∏è C√≥digos de Campo Utilizados - Cerros UNI")
    
    st.markdown("#### üìä Diccionario de C√≥digos Aplicados")
    
    col5, col6 = st.columns(2)
    
    with col5:
        st.markdown("**Tipos de Estructura:**")
        st.markdown("""
        - **J**: Junta (diaclasa)
        - **F**: Falla
        - **E**: Espalte (foliaci√≥n)
        """)
        
        st.markdown("**Relleno de Discontinuidades:**")
        fill_data = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Tipo de Relleno": ["Sin relleno", "Relleno duro <5mm", "Relleno duro >5mm", "Relleno blando <5mm", "Relleno blando >5mm"],
            "Rating": [6, 4, 2, 2, 0]
        }
        st.dataframe(pd.DataFrame(fill_data), use_container_width=True)
    
    with col6:
        st.markdown("**Meteorizaci√≥n:**")
        weathering_data = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Grado": ["Inalterada", "Ligeramente alterada", "Moderadamente alterada", "Muy alterada", "Descompuesta"],
            "Rating": [6, 5, 3, 1, 0]
        }
        st.dataframe(pd.DataFrame(weathering_data), use_container_width=True)
        
        st.markdown("**Conversi√≥n de Espaciado:**")
        spacing_conversion = {
            "C√≥digo": [1, 2, 3, 4, 5],
            "Espaciado Real (mm)": [10, 40, 130, 400, 800],
            "Descripci√≥n": ["Muy cerrado", "Cerrado", "Moderado", "Amplio", "Muy amplio"]
        }
        st.dataframe(pd.DataFrame(spacing_conversion), use_container_width=True)
    
    st.markdown("---")
    st.info("üìã **Nota:** Todas las tablas est√°n basadas en la metodolog√≠a est√°ndar RMR14 de Bieniawski (1989) y han sido aplicadas consistentemente en el an√°lisis de las 4 estaciones de Cerros UNI.")

with tab6:
    st.markdown("## ‚ÑπÔ∏è Acerca de este Trabajo")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### üìö Marco Te√≥rico: RMR de Bieniawski (1989)
        
        El sistema de clasificaci√≥n geomec√°nica **RMR (Rock Mass Rating)**, desarrollado por 
        Bieniawski en 1973 y refinado hasta su versi√≥n m√°s utilizada en 1989 (RMR89), constituye 
        una metodolog√≠a cuantitativa para evaluar la calidad de un macizo rocoso desde una 
        perspectiva estructural, geol√≥gica e ingenieril.
        
        #### üéØ Prop√≥sito
        Su prop√≥sito es proporcionar un √≠ndice num√©rico representativo del comportamiento del 
        macizo ante excavaciones subterr√°neas, taludes o cimentaciones.
        
        #### üîç Fundamentos Geol√≥gicos
        Desde el punto de vista geol√≥gico, el macizo rocoso se concibe como un medio discontinuo, 
        compuesto por bloques delimitados por fracturas, diaclasas y planos de debilidad. La 
        naturaleza y distribuci√≥n de estas discontinuidades, as√≠ como la litolog√≠a del material 
        intacto, condicionan su resistencia global y su estabilidad.
        
        #### üìä Los 5 Par√°metros Fundamentales
        El RMR toma en cuenta cinco par√°metros fundamentales que reflejan estas caracter√≠sticas:
        
        1. **Resistencia a compresi√≥n uniaxial** del material intacto
        2. **√çndice de calidad de la roca (RQD)**
        3. **Espaciamiento de discontinuidades**
        4. **Condici√≥n de las discontinuidades** (persistencia, rugosidad, apertura, relleno, alteraci√≥n)
        5. **Condiciones de agua** en las discontinuidades
        
        #### ‚öñÔ∏è Sistema de Puntuaci√≥n
        Desde la perspectiva geomec√°nica, cada uno de estos par√°metros se traduce en un puntaje 
        parcial que refleja su influencia sobre el comportamiento mec√°nico del macizo. La suma de 
        estos puntajes, junto con un ajuste por la orientaci√≥n relativa de las discontinuidades 
        respecto al dise√±o estructural, proporciona un valor total que var√≠a entre 0 y 100.
        
        #### üèóÔ∏è Clasificaci√≥n de Calidad
        Este valor permite clasificar el macizo en una de cinco categor√≠as de calidad:
        - **Clase I (81-100):** Muy buena
        - **Clase II (61-80):** Buena  
        - **Clase III (41-60):** Regular
        - **Clase IV (21-40):** Mala
        - **Clase V (0-20):** Muy mala
        
        Facilitando decisiones sobre sostenimiento, excavaci√≥n y modelamiento.
        """)
        
        st.markdown("""
        ### üèîÔ∏è Aplicaci√≥n en Cerros UNI
        
        #### üìç Ubicaci√≥n del Estudio
        El presente trabajo aplica la metodolog√≠a RMR14 a los **Cerros UNI**, ubicados en las 
        instalaciones de la Universidad Nacional de Ingenier√≠a, como parte del Trabajo Escalonado 
        de Geomec√°nica.
        
        #### üî¨ Metodolog√≠a Aplicada
        - **Levantamiento de campo:** 4 estaciones geol√≥gicas
        - **Digitalizaci√≥n completa:** 60 discontinuidades estructurales
        - **An√°lisis de familias:** Clustering angular con tolerancia ¬±15¬∞
        - **C√°lculo RQD alternativo:** M√©todo emp√≠rico desde frecuencia de discontinuidades
        - **Plataforma interactiva:** Desarrollo web para an√°lisis geot√©cnico
        
        #### üéì Contexto Acad√©mico
        Este trabajo forma parte de la asignatura **GE-823A: Geomec√°nica** de la Escuela 
        Profesional de Ingenier√≠a Geol√≥gica, demostrando la aplicaci√≥n pr√°ctica de conceptos 
        te√≥ricos en un caso de estudio real dentro del campus universitario.
        """)
    
    with col2:
        st.markdown("""
        ### üë• Informaci√≥n del Proyecto
        
        **üèõÔ∏è Instituci√≥n:**  
        Universidad Nacional de Ingenier√≠a
        
        **üéì Facultad:**  
        Ingenier√≠a Geol√≥gica, Minera y Metal√∫rgica
        
        **üìö Curso:**  
        GE-823A: Geomec√°nica
        
        **üë®‚Äçüè´ Docente:**  
        Msc. Ing. Joseph Andrew Soria Medina
        
        **üìÖ Fecha:**  
        27 de junio de 2025
        
        ---
        
        ### ‚úçÔ∏è Autores
        
        **Campos Bravo, Ronald Diego**  
        **Villacorta Leiva, Gabriela Cristina**  
        **Mandujano Gutierrez, Victor Jean Pierre**
        
        ---
        
        ### üõ†Ô∏è Tecnolog√≠as Utilizadas
        
        - **Python** - An√°lisis de datos
        - **Streamlit** - Interfaz web interactiva  
        - **Plotly** - Visualizaciones avanzadas
        - **Pandas** - Manipulaci√≥n de datos
        - **NumPy** - C√°lculos num√©ricos
        - **Jupyter** - Desarrollo y prototipado
        
        ---
        
        ### üìä Resultados Principales
        
        **üèîÔ∏è Clasificaci√≥n general:**  
        Clase II - Buena (RMR: 61.8 - 76.3)
        
        **üìè Datos procesados:**  
        60 discontinuidades en 4 estaciones
        
        **üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Familias identificadas:**  
        9 familias estructurales principales
        
        **üîç Metodolog√≠a innovadora:**  
        RQD calculado desde frecuencia de discontinuidades
        """)
        
        st.markdown("""
        ### üåü Validaci√≥n Acad√©mica
        
        El RMR ha sido ampliamente validado con base en observaciones emp√≠ricas en obras 
        subterr√°neas a nivel mundial, convirti√©ndose en un est√°ndar de referencia. Su car√°cter 
        sistem√°tico, adaptable y emp√≠rico lo hace aplicable tanto en etapas de prospecci√≥n como 
        en dise√±o y monitoreo.
        
        Adem√°s, sirve como base para correlaciones con otros sistemas como Q (de Barton) y 
        GSI (Hoek y Brown), integrando as√≠ el an√°lisis estructural con modelos de resistencia 
        y deformabilidad en medios fracturados.
        """, help="Informaci√≥n basada en Bieniawski (1989) y aplicaciones modernas")

# Footer acad√©mico
st.markdown("---")
st.markdown("""
### üèîÔ∏è RMR14 An√°lisis Geot√©cnico - Cerros UNI

**Universidad Nacional de Ingenier√≠a** ‚Ä¢ Facultad de Ingenier√≠a Geol√≥gica, Minera y Metal√∫rgica

Trabajo Escalonado de Geomec√°nica GE-823A ‚Ä¢ Basado en metodolog√≠a Bieniawski 2014 ‚Ä¢ Junio 2025

*Plataforma web desarrollada para digitalizaci√≥n y an√°lisis interactivo de discontinuidades estructurales*
""", help="Aplicaci√≥n desarrollada como parte del trabajo acad√©mico de geomec√°nica") 